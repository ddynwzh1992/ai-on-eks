{{- if eq .Values.inference.framework "vllm" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Values.inference.serviceName}}
  namespace: {{.Values.inference.serviceNamespace}}
  labels:
    "app.kubernetes.io/component": "{{.Values.inference.serviceName}}"
spec:
  replicas: {{ .Values.inference.modelServer.deployment.replicas }}
  selector:
    matchLabels:
      "app.kubernetes.io/component": "{{.Values.inference.serviceName}}"
  template:
    metadata:
      labels:
        "app.kubernetes.io/component": "{{.Values.inference.serviceName}}"
    spec:
      containers:
        - name: vllm
          image: "{{ .Values.inference.modelServer.image.repository }}:{{ .Values.inference.modelServer.image.tag }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args: [
            "python3 /vllm-workspace/vllm_serve.py"
          ]
          env:
            {{- if .Values.modelParameters }}
            {{- range $key, $value := .Values.modelParameters }}
            - name: {{ $key | snakecase | upper }}
              value: "{{ $value }}"
            {{- end }}
            {{- end }}
            - name: HUGGING_FACE_HUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hf-token
                  key: token
          ports:
            - containerPort: 8000
              name: http
          resources:
            {{- if eq .Values.inference.accelerator "gpu" }}
            {{- toYaml .Values.inference.modelServer.deployment.resources.gpu | nindent 12 }}
            {{- else }}
            {{- toYaml .Values.inference.modelServer.deployment.resources.neuron | nindent 12 }}
            {{- end }}
          volumeMounts:
            - mountPath: /vllm-workspace/vllm_serve.py
              subPath: vllm_serve.py
              name: vllm-script
            - mountPath: /dev/shm
              name: dshm
      {{- if eq .Values.inference.accelerator "neuron" }}
      tolerations:
        - key: "aws.amazon.com/neuron"
          operator: "Exists"
          effect: "NoSchedule"
      {{- end }}
      {{- if .Values.inference.modelServer.deployment.instanceType }}
      nodeSelector:
        beta.kubernetes.io/instance-type: {{ .Values.inference.modelServer.deployment.instanceType }}
      {{- end }}
      {{- if and .Values.inference.modelServer.deployment.topologySpreadConstraints.enabled .Values.inference.modelServer.deployment.topologySpreadConstraints.constraints }}
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              "app.kubernetes.io/component": "{{$.Values.inference.serviceName}}"
      {{- end }}
      {{- if and .Values.inference.modelServer.deployment.podAffinity.enabled .Values.inference.modelServer.deployment.podAffinity.preferredDuringSchedulingIgnoredDuringExecution }}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: topology.kubernetes.io/zone
              labelSelector:
                matchLabels:
                  "app.kubernetes.io/component": "{{$.Values.inference.serviceName}}"
      {{- end }}
      volumes:
        - configMap:
            items:
              - key: vllm_serve.py
                path: vllm_serve.py
            name: vllm-serve
          name: vllm-script
        - name: dshm
          emptyDir:
            medium: Memory
---
apiVersion: v1
kind: Service
metadata:
  name: {{.Values.inference.serviceName}}
  namespace: {{.Values.inference.serviceNamespace}}
  {{- with .Values.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    "app.kubernetes.io/component": "{{.Values.inference.serviceName}}"
{{- end }}
